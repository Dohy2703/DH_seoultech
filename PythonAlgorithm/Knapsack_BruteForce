#Knapsack

import random
class Item(object):
    def __init__(self, name, value, weight):
        self.name = name
        self.value = value
        self.weight = weight

    def __str__(self):
        return ("(" + str(self.name) + "," + str(self.value) + "," + str(self.weight) + ")")

class Knapsack(object):
    def __init__(self, names, values, weights, max_weight):
        self.items = []
        self.max_weight = max_weight
        self.max_value = 0
        self.opt_case = 0
        self.createdItems = []

        for i in range(len(names)):
            item = Item(names[i], values[i], weights[i])
            self.items.append(item)

    def printItems(self):
        for item in self.items:
            print(item)

    def createItems(self, item_count, max_value, max_weight):
        for i in range(item_count):
            item = Item(i, random.randint(1,max_value), random.randint(1, max_weight))
            self.createdItems.append(item)

    def findOptCase(self):
        self.max_value = 0
        item_count = len(self.items)
        case_count = 2 ** item_count - 1

        for case in range(1, case_count + 1):
            value = 0
            weight = 0

            for bitnum in range(item_count):
                target_bit_num = 2 ** bitnum

                if (case & target_bit_num != 0):
                    item = self.items[bitnum]
                    value += item.value
                    weight += item.weight

            if (value > self.max_value and weight <= self.max_weight):
                self.opt_case = case
                self.max_value = value

        chosen_items = self.decodeCase(self.opt_case)
        return (chosen_items, self.max_value)

    def decodeCase(self, case):
        item_count = len(self.items)
        chosen_items = []

        for index in range(item_count):
            target_bit_num = 2 ** index
            if (case & target_bit_num == target_bit_num):
                item = self.items[index]
                chosen_items.append(item.name)

        return chosen_items

names = ['0', '1', '2', '3', '4', '5', '6', '7', '8']
values = [10, 30, 20, 14, 23, 11, 15, 18, 12]
weights = [5, 8, 3, 7, 9, 2, 6, 2, 3]
max_weight = 20
knapsack = Knapsack(names, values, weights, max_weight)
knapsack.printItems()
(chosen_items, max_value) = knapsack.findOptCase()
print(chosen_items, max_value)
